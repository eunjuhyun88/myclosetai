#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî• MyCloset AI - Pose Analyzer
==============================

‚úÖ Ìè¨Ï¶à ÌíàÏßà Î∂ÑÏÑù Î∞è ÌèâÍ∞Ä
‚úÖ Í¥ÄÏ†à Í∞ÅÎèÑ Í≥ÑÏÇ∞
‚úÖ Ïã†Ï≤¥ ÎπÑÏú® Î∂ÑÏÑù
‚úÖ Í∞ÄÏÉÅ ÌîºÌåÖ ÏµúÏ†ÅÌôî

ÌååÏùº ÏúÑÏπò: backend/app/ai_pipeline/steps/pose_estimation/utils/pose_analyzer.py
ÏûëÏÑ±Ïûê: MyCloset AI Team
ÎÇ†Ïßú: 2025-08-01
Î≤ÑÏ†Ñ: v1.0
"""

import os
import sys
import time
import logging
import warnings
import math
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple, Union

# Í≥µÌÜµ imports
from app.ai_pipeline.utils.common_imports import (
    np, DEVICE, TORCH_AVAILABLE,
    Path, Dict, Any, Optional, Tuple, List, Union,
    dataclass, field, Enum
)

# Í≤ΩÍ≥† Î¨¥Ïãú
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=ImportWarning)

logger = logging.getLogger(__name__)

class PoseQuality(Enum):
    """Ìè¨Ï¶à ÌíàÏßà Îì±Í∏â"""
    EXCELLENT = "excellent"     # 90-100Ï†ê
    GOOD = "good"              # 75-89Ï†ê  
    ACCEPTABLE = "acceptable"   # 60-74Ï†ê
    POOR = "poor"              # 40-59Ï†ê
    VERY_POOR = "very_poor"    # 0-39Ï†ê

class PoseAnalyzer:
    """Ìè¨Ï¶à Î∂ÑÏÑùÍ∏∞ - ÌíàÏßà ÌèâÍ∞Ä Î∞è ÏµúÏ†ÅÌôî"""
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.PoseAnalyzer")
        
        # COCO 17 ÌÇ§Ìè¨Ïù∏Ìä∏ Ï†ïÏùò
        self.coco_keypoints = [
            "nose", "left_eye", "right_eye", "left_ear", "right_ear",
            "left_shoulder", "right_shoulder", "left_elbow", "right_elbow",
            "left_wrist", "right_wrist", "left_hip", "right_hip",
            "left_knee", "right_knee", "left_ankle", "right_ankle"
        ]
        
        # Í¥ÄÏ†à Ïó∞Í≤∞ Ï†ïÏùò
        self.joint_connections = [
            (0, 1), (0, 2), (1, 3), (2, 4),  # Î®∏Î¶¨
            (5, 6), (5, 7), (7, 9), (6, 8), (8, 10),  # ÏÉÅÏ≤¥
            (5, 11), (6, 12), (11, 12),  # Î™∏ÌÜµ
            (11, 13), (13, 15), (12, 14), (14, 16)  # ÌïòÏ≤¥
        ]
        
        # Ïã†Ï≤¥ Î∂ÄÏúÑ Ï†ïÏùò
        self.body_parts = {
            "head": [0, 1, 2, 3, 4],
            "torso": [5, 6, 11, 12],
            "left_arm": [5, 7, 9],
            "right_arm": [6, 8, 10],
            "left_leg": [11, 13, 15],
            "right_leg": [12, 14, 16]
        }
    
    @staticmethod
    def calculate_joint_angles(keypoints: List[List[float]]) -> Dict[str, float]:
        """Í¥ÄÏ†à Í∞ÅÎèÑ Í≥ÑÏÇ∞"""
        try:
            angles = {}
            
            def calculate_angle_3points(p1, p2, p3):
                """3Ï†êÏúºÎ°ú Í∞ÅÎèÑ Í≥ÑÏÇ∞"""
                if len(p1) < 2 or len(p2) < 2 or len(p3) < 2:
                    return 0.0
                
                # Î≤°ÌÑ∞ Í≥ÑÏÇ∞
                v1 = np.array([p1[0] - p2[0], p1[1] - p2[1]])
                v2 = np.array([p3[0] - p2[0], p3[1] - p2[1]])
                
                # Î≤°ÌÑ∞ Ï†ïÍ∑úÌôî
                v1_norm = np.linalg.norm(v1)
                v2_norm = np.linalg.norm(v2)
                
                if v1_norm == 0 or v2_norm == 0:
                    return 0.0
                
                v1 = v1 / v1_norm
                v2 = v2 / v2_norm
                
                # Í∞ÅÎèÑ Í≥ÑÏÇ∞
                dot_product = np.dot(v1, v2)
                dot_product = np.clip(dot_product, -1.0, 1.0)
                angle = np.arccos(dot_product)
                
                return np.degrees(angle)
            
            def calculate_directional_angle(p1, p2, p3):
                """Î∞©Ìñ•ÏÑ±ÏùÑ Í≥†Î†§Ìïú Í∞ÅÎèÑ Í≥ÑÏÇ∞"""
                if len(p1) < 2 or len(p2) < 2 or len(p3) < 2:
                    return 0.0
                
                # Î≤°ÌÑ∞ Í≥ÑÏÇ∞
                v1 = np.array([p1[0] - p2[0], p1[1] - p2[1]])
                v2 = np.array([p3[0] - p2[0], p3[1] - p2[1]])
                
                # Ïô∏Ï†ÅÏùÑ Ïù¥Ïö©Ìïú Î∞©Ìñ•ÏÑ± Í≥ÑÏÇ∞
                cross_product = np.cross(v1, v2)
                dot_product = np.dot(v1, v2)
                
                angle = np.arctan2(np.linalg.norm(cross_product), dot_product)
                angle = np.degrees(angle)
                
                # Î∞©Ìñ•ÏÑ±Ïóê Îî∞Î•∏ Î∂ÄÌò∏ Í≤∞Ï†ï
                if cross_product < 0:
                    angle = -angle
                
                return angle
            
            # Ï£ºÏöî Í¥ÄÏ†à Í∞ÅÎèÑ Í≥ÑÏÇ∞
            if len(keypoints) >= 17:
                # Ïñ¥Íπ® Í∞ÅÎèÑ
                if all(len(keypoints[i]) >= 2 for i in [5, 6, 11]):
                    angles["left_shoulder"] = calculate_angle_3points(
                        keypoints[5], keypoints[6], keypoints[11]
                    )
                
                if all(len(keypoints[i]) >= 2 for i in [6, 5, 12]):
                    angles["right_shoulder"] = calculate_angle_3points(
                        keypoints[6], keypoints[5], keypoints[12]
                    )
                
                # ÌåîÍøàÏπò Í∞ÅÎèÑ
                if all(len(keypoints[i]) >= 2 for i in [5, 7, 9]):
                    angles["left_elbow"] = calculate_angle_3points(
                        keypoints[5], keypoints[7], keypoints[9]
                    )
                
                if all(len(keypoints[i]) >= 2 for i in [6, 8, 10]):
                    angles["right_elbow"] = calculate_angle_3points(
                        keypoints[6], keypoints[8], keypoints[10]
                    )
                
                # Î¨¥Î¶é Í∞ÅÎèÑ
                if all(len(keypoints[i]) >= 2 for i in [11, 13, 15]):
                    angles["left_knee"] = calculate_angle_3points(
                        keypoints[11], keypoints[13], keypoints[15]
                    )
                
                if all(len(keypoints[i]) >= 2 for i in [12, 14, 16]):
                    angles["right_knee"] = calculate_angle_3points(
                        keypoints[12], keypoints[14], keypoints[16]
                    )
                
                # ÏóâÎç©Ïù¥ Í∞ÅÎèÑ
                if all(len(keypoints[i]) >= 2 for i in [5, 11, 13]):
                    angles["left_hip"] = calculate_angle_3points(
                        keypoints[5], keypoints[11], keypoints[13]
                    )
                
                if all(len(keypoints[i]) >= 2 for i in [6, 12, 14]):
                    angles["right_hip"] = calculate_angle_3points(
                        keypoints[6], keypoints[12], keypoints[14]
                    )
                
                # Î™© Í∞ÅÎèÑ (Ïñ¥Íπ®ÏôÄ ÏΩî Í∏∞Ï§Ä)
                if all(len(keypoints[i]) >= 2 for i in [0, 5, 6]):
                    angles["neck"] = calculate_angle_3points(
                        keypoints[0], keypoints[5], keypoints[6]
                    )
            
            return angles
            
        except Exception as e:
            logger.error(f"‚ùå Í¥ÄÏ†à Í∞ÅÎèÑ Í≥ÑÏÇ∞ Ïã§Ìå®: {e}")
            return {}
    
    @staticmethod
    def calculate_body_proportions(keypoints: List[List[float]]) -> Dict[str, float]:
        """Ïã†Ï≤¥ ÎπÑÏú® Í≥ÑÏÇ∞"""
        try:
            proportions = {}
            
            def calculate_distance(p1, p2):
                """Îëê Ï†ê Í∞ÑÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞"""
                if len(p1) < 2 or len(p2) < 2:
                    return 0.0
                return np.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)
            
            def calculate_body_part_length(keypoint_indices):
                """Ïã†Ï≤¥ Î∂ÄÏúÑ Í∏∏Ïù¥ Í≥ÑÏÇ∞"""
                if len(keypoint_indices) < 2:
                    return 0.0
                
                total_length = 0.0
                for i in range(len(keypoint_indices) - 1):
                    idx1, idx2 = keypoint_indices[i], keypoint_indices[i + 1]
                    if idx1 < len(keypoints) and idx2 < len(keypoints):
                        distance = calculate_distance(keypoints[idx1], keypoints[idx2])
                        total_length += distance
                
                return total_length
            
            if len(keypoints) >= 17:
                # Ïã†Ï≤¥ Î∂ÄÏúÑ Í∏∏Ïù¥ Í≥ÑÏÇ∞
                proportions["head_length"] = calculate_body_part_length([0, 1, 2, 3, 4])
                proportions["torso_length"] = calculate_body_part_length([5, 6, 11, 12])
                proportions["left_arm_length"] = calculate_body_part_length([5, 7, 9])
                proportions["right_arm_length"] = calculate_body_part_length([6, 8, 10])
                proportions["left_leg_length"] = calculate_body_part_length([11, 13, 15])
                proportions["right_leg_length"] = calculate_body_part_length([12, 14, 16])
                
                # Ïã†Ï≤¥ ÎπÑÏú® Í≥ÑÏÇ∞
                if proportions["torso_length"] > 0:
                    proportions["head_to_torso_ratio"] = proportions["head_length"] / proportions["torso_length"]
                    proportions["arm_to_torso_ratio"] = (proportions["left_arm_length"] + proportions["right_arm_length"]) / (2 * proportions["torso_length"])
                    proportions["leg_to_torso_ratio"] = (proportions["left_leg_length"] + proportions["right_leg_length"]) / (2 * proportions["torso_length"])
                
                # Ï¢åÏö∞ ÎåÄÏπ≠ÏÑ± Í≥ÑÏÇ∞
                if proportions["left_arm_length"] > 0 and proportions["right_arm_length"] > 0:
                    proportions["arm_symmetry"] = min(proportions["left_arm_length"], proportions["right_arm_length"]) / max(proportions["left_arm_length"], proportions["right_arm_length"])
                
                if proportions["left_leg_length"] > 0 and proportions["right_leg_length"] > 0:
                    proportions["leg_symmetry"] = min(proportions["left_leg_length"], proportions["right_leg_length"]) / max(proportions["left_leg_length"], proportions["right_leg_length"])
                
                # Ï†ÑÏ≤¥ Ïã†Ï≤¥ Í∏∏Ïù¥
                proportions["total_height"] = proportions["head_length"] + proportions["torso_length"] + (proportions["left_leg_length"] + proportions["right_leg_length"]) / 2
                
                # Ïã†Ï≤¥ ÎπÑÏú® ÌëúÏ§ÄÌôî
                if proportions["total_height"] > 0:
                    for key in proportions:
                        if key != "total_height" and "ratio" not in key and "symmetry" not in key:
                            proportions[f"{key}_normalized"] = proportions[key] / proportions["total_height"]
            
            return proportions
            
        except Exception as e:
            logger.error(f"‚ùå Ïã†Ï≤¥ ÎπÑÏú® Í≥ÑÏÇ∞ Ïã§Ìå®: {e}")
            return {}
    
    def assess_pose_quality(self, 
                          keypoints: List[List[float]], 
                          joint_angles: Dict[str, float], 
                          body_proportions: Dict[str, float]) -> Dict[str, Any]:
        """Ìè¨Ï¶à ÌíàÏßà ÌèâÍ∞Ä"""
        try:
            quality_scores = {}
            
            # 1. Ìï¥Î∂ÄÌïôÏ†Å ÌÉÄÎãπÏÑ± ÌèâÍ∞Ä
            anatomical_score = self._assess_anatomical_plausibility(keypoints, joint_angles)
            quality_scores["anatomical_plausibility"] = anatomical_score
            
            # 2. Ïã†Ï≤¥ ÎåÄÏπ≠ÏÑ± ÌèâÍ∞Ä
            symmetry_score = self._assess_body_symmetry(keypoints, body_proportions)
            quality_scores["body_symmetry"] = symmetry_score
            
            # 3. Í¥ÄÏ†à Í∞ÅÎèÑ Ï†ïÏÉÅÏÑ± ÌèâÍ∞Ä
            joint_score = self._validate_joint_angles(joint_angles)
            quality_scores["joint_angles"] = joint_score
            
            # 4. Ïã†Ï≤¥ ÎπÑÏú® Ï†ïÏÉÅÏÑ± ÌèâÍ∞Ä
            proportion_score = self._validate_body_proportions(body_proportions)
            quality_scores["body_proportions"] = proportion_score
            
            # 5. Ï¢åÏö∞ Í∑†Ìòï ÌèâÍ∞Ä
            balance_score = self._analyze_left_right_balance(keypoints)
            quality_scores["left_right_balance"] = balance_score
            
            # 6. ÏûêÏÑ∏ Ï†ïÎ†¨ ÌèâÍ∞Ä
            alignment_score = self._analyze_posture_alignment(keypoints)
            quality_scores["posture_alignment"] = alignment_score
            
            # 7. Í∞ÄÏÉÅ ÌîºÌåÖ Ï†ÅÌï©ÏÑ± ÌèâÍ∞Ä
            fitting_score = self._assess_virtual_fitting_suitability(keypoints, joint_angles, body_proportions)
            quality_scores["virtual_fitting_suitability"] = fitting_score
            
            # Ï¢ÖÌï© ÌíàÏßà Ï†êÏàò Í≥ÑÏÇ∞
            overall_score = sum(quality_scores.values()) / len(quality_scores)
            quality_scores["overall_quality"] = overall_score
            
            # ÌíàÏßà Îì±Í∏â Í≤∞Ï†ï
            quality_grade = self._determine_quality_grade(overall_score)
            quality_scores["quality_grade"] = quality_grade
            
            # Î¨∏Ï†úÏ†ê ÏãùÎ≥Ñ
            issues = self._identify_pose_issues(keypoints, joint_angles, body_proportions, quality_scores)
            quality_scores["issues"] = issues
            
            # Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠
            recommendations = self._generate_pose_recommendations(issues, quality_scores)
            quality_scores["recommendations"] = recommendations
            
            return quality_scores
            
        except Exception as e:
            logger.error(f"‚ùå Ìè¨Ï¶à ÌíàÏßà ÌèâÍ∞Ä Ïã§Ìå®: {e}")
            return {"error": str(e)}
    
    def _assess_anatomical_plausibility(self, keypoints: List[List[float]], joint_angles: Dict[str, float]) -> float:
        """Ìï¥Î∂ÄÌïôÏ†Å ÌÉÄÎãπÏÑ± ÌèâÍ∞Ä"""
        try:
            score = 0.0
            total_checks = 0
            
            # Í¥ÄÏ†à Í∞ÅÎèÑ Î≤îÏúÑ Í≤ÄÏÇ¨
            angle_ranges = {
                "left_elbow": (0, 180),
                "right_elbow": (0, 180),
                "left_knee": (0, 180),
                "right_knee": (0, 180),
                "left_hip": (0, 180),
                "right_hip": (0, 180)
            }
            
            for joint, (min_angle, max_angle) in angle_ranges.items():
                if joint in joint_angles:
                    angle = joint_angles[joint]
                    if min_angle <= angle <= max_angle:
                        score += 1.0
                    else:
                        # Î≤îÏúÑÎ•º Î≤óÏñ¥ÎÇòÎ©¥ ÌéòÎÑêÌã∞
                        penalty = min(abs(angle - min_angle), abs(angle - max_angle)) / 90.0
                        score += max(0, 1.0 - penalty)
                    total_checks += 1
            
            # ÌÇ§Ìè¨Ïù∏Ìä∏ Í∞Ñ Í±∞Î¶¨ Í≤ÄÏÇ¨
            if len(keypoints) >= 17:
                # Ïñ¥Íπ® ÎÑàÎπÑ Í≤ÄÏÇ¨
                shoulder_width = np.sqrt((keypoints[5][0] - keypoints[6][0])**2 + (keypoints[5][1] - keypoints[6][1])**2)
                if 0.1 < shoulder_width < 0.5:  # Ï†ïÍ∑úÌôîÎêú Ï¢åÌëú Í∏∞Ï§Ä
                    score += 1.0
                total_checks += 1
                
                # Ìåî Í∏∏Ïù¥ Í≤ÄÏÇ¨
                left_arm_length = np.sqrt((keypoints[5][0] - keypoints[9][0])**2 + (keypoints[5][1] - keypoints[9][1])**2)
                right_arm_length = np.sqrt((keypoints[6][0] - keypoints[10][0])**2 + (keypoints[6][1] - keypoints[10][1])**2)
                
                if 0.2 < left_arm_length < 0.8 and 0.2 < right_arm_length < 0.8:
                    score += 1.0
                total_checks += 1
            
            return score / total_checks if total_checks > 0 else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå Ìï¥Î∂ÄÌïôÏ†Å ÌÉÄÎãπÏÑ± ÌèâÍ∞Ä Ïã§Ìå®: {e}")
            return 0.0
    
    def _assess_body_symmetry(self, keypoints: List[List[float]], body_proportions: Dict[str, float]) -> float:
        """Ïã†Ï≤¥ ÎåÄÏπ≠ÏÑ± ÌèâÍ∞Ä"""
        try:
            score = 0.0
            total_checks = 0
            
            # Ï¢åÏö∞ Ìåî Í∏∏Ïù¥ ÎåÄÏπ≠ÏÑ±
            if "arm_symmetry" in body_proportions:
                score += body_proportions["arm_symmetry"]
                total_checks += 1
            
            # Ï¢åÏö∞ Îã§Î¶¨ Í∏∏Ïù¥ ÎåÄÏπ≠ÏÑ±
            if "leg_symmetry" in body_proportions:
                score += body_proportions["leg_symmetry"]
                total_checks += 1
            
            # ÌÇ§Ìè¨Ïù∏Ìä∏ Ï¢åÏö∞ ÎåÄÏπ≠ÏÑ±
            if len(keypoints) >= 17:
                # Ïñ¥Íπ® ÎÜíÏù¥ ÎåÄÏπ≠ÏÑ±
                shoulder_height_diff = abs(keypoints[5][1] - keypoints[6][1])
                max_height = max(keypoints[5][1], keypoints[6][1])
                if max_height > 0:
                    shoulder_symmetry = 1.0 - (shoulder_height_diff / max_height)
                    score += shoulder_symmetry
                    total_checks += 1
                
                # ÏóâÎç©Ïù¥ ÎÜíÏù¥ ÎåÄÏπ≠ÏÑ±
                hip_height_diff = abs(keypoints[11][1] - keypoints[12][1])
                max_hip_height = max(keypoints[11][1], keypoints[12][1])
                if max_hip_height > 0:
                    hip_symmetry = 1.0 - (hip_height_diff / max_hip_height)
                    score += hip_symmetry
                    total_checks += 1
            
            return score / total_checks if total_checks > 0 else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå Ïã†Ï≤¥ ÎåÄÏπ≠ÏÑ± ÌèâÍ∞Ä Ïã§Ìå®: {e}")
            return 0.0
    
    def _point_to_line_distance(self, point, line_start, line_end):
        """Ï†êÏóêÏÑú ÏÑ†ÍπåÏßÄÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞"""
        try:
            if len(point) < 2 or len(line_start) < 2 or len(line_end) < 2:
                return 0.0
            
            # ÏÑ†Ïùò Î∞©Ìñ• Î≤°ÌÑ∞
            line_vec = np.array([line_end[0] - line_start[0], line_end[1] - line_start[1]])
            point_vec = np.array([point[0] - line_start[0], point[1] - line_start[1]])
            
            # ÏÑ†Ïùò Í∏∏Ïù¥
            line_length = np.linalg.norm(line_vec)
            if line_length == 0:
                return np.linalg.norm(point_vec)
            
            # Ï†êÏóêÏÑú ÏÑ†ÍπåÏßÄÏùò Í±∞Î¶¨
            t = np.dot(point_vec, line_vec) / (line_length ** 2)
            t = np.clip(t, 0, 1)
            
            projection = line_start + t * line_vec
            distance = np.linalg.norm(np.array(point) - projection)
            
            return distance
            
        except Exception as e:
            logger.error(f"‚ùå Ï†ê-ÏÑ† Í±∞Î¶¨ Í≥ÑÏÇ∞ Ïã§Ìå®: {e}")
            return 0.0
    
    def _validate_joint_angles(self, joint_angles: Dict[str, float]) -> Dict[str, bool]:
        """Í¥ÄÏ†à Í∞ÅÎèÑ Í≤ÄÏ¶ù"""
        try:
            valid_angles = {}
            
            # Ï†ïÏÉÅ Í∞ÅÎèÑ Î≤îÏúÑ Ï†ïÏùò
            normal_ranges = {
                "left_elbow": (60, 150),
                "right_elbow": (60, 150),
                "left_knee": (120, 180),
                "right_knee": (120, 180),
                "left_hip": (0, 120),
                "right_hip": (0, 120),
                "left_shoulder": (0, 180),
                "right_shoulder": (0, 180)
            }
            
            for joint, angle in joint_angles.items():
                if joint in normal_ranges:
                    min_angle, max_angle = normal_ranges[joint]
                    valid_angles[joint] = min_angle <= angle <= max_angle
                else:
                    valid_angles[joint] = True  # Ïïå Ïàò ÏóÜÎäî Í¥ÄÏ†àÏùÄ Ïú†Ìö®Î°ú Í∞ÑÏ£º
            
            return valid_angles
            
        except Exception as e:
            logger.error(f"‚ùå Í¥ÄÏ†à Í∞ÅÎèÑ Í≤ÄÏ¶ù Ïã§Ìå®: {e}")
            return {}
    
    def _validate_body_proportions(self, body_proportions: Dict[str, float]) -> Dict[str, Any]:
        """Ïã†Ï≤¥ ÎπÑÏú® Í≤ÄÏ¶ù"""
        try:
            validation_results = {}
            
            # Ï†ïÏÉÅ ÎπÑÏú® Î≤îÏúÑ Ï†ïÏùò
            normal_ranges = {
                "head_to_torso_ratio": (0.2, 0.4),
                "arm_to_torso_ratio": (0.6, 1.2),
                "leg_to_torso_ratio": (1.0, 1.8),
                "arm_symmetry": (0.8, 1.0),
                "leg_symmetry": (0.8, 1.0)
            }
            
            for proportion, value in body_proportions.items():
                if proportion in normal_ranges:
                    min_val, max_val = normal_ranges[proportion]
                    validation_results[proportion] = {
                        "value": value,
                        "is_normal": min_val <= value <= max_val,
                        "normal_range": (min_val, max_val)
                    }
                else:
                    validation_results[proportion] = {
                        "value": value,
                        "is_normal": True,  # Ïïå Ïàò ÏóÜÎäî ÎπÑÏú®ÏùÄ Ï†ïÏÉÅÏúºÎ°ú Í∞ÑÏ£º
                        "normal_range": None
                    }
            
            return validation_results
            
        except Exception as e:
            logger.error(f"‚ùå Ïã†Ï≤¥ ÎπÑÏú® Í≤ÄÏ¶ù Ïã§Ìå®: {e}")
            return {}
    
    def _analyze_left_right_balance(self, keypoints: List[List[float]]) -> Dict[str, Any]:
        """Ï¢åÏö∞ Í∑†Ìòï Î∂ÑÏÑù"""
        try:
            balance_analysis = {}
            
            if len(keypoints) >= 17:
                # Ïñ¥Íπ® Í∑†Ìòï
                left_shoulder = keypoints[5]
                right_shoulder = keypoints[6]
                shoulder_balance = abs(left_shoulder[1] - right_shoulder[1])
                balance_analysis["shoulder_balance"] = 1.0 - min(shoulder_balance, 0.1) / 0.1
                
                # ÏóâÎç©Ïù¥ Í∑†Ìòï
                left_hip = keypoints[11]
                right_hip = keypoints[12]
                hip_balance = abs(left_hip[1] - right_hip[1])
                balance_analysis["hip_balance"] = 1.0 - min(hip_balance, 0.1) / 0.1
                
                # Î¨¥Î¶é Í∑†Ìòï
                left_knee = keypoints[13]
                right_knee = keypoints[14]
                knee_balance = abs(left_knee[1] - right_knee[1])
                balance_analysis["knee_balance"] = 1.0 - min(knee_balance, 0.1) / 0.1
                
                # Ï†ÑÏ≤¥ Í∑†Ìòï Ï†êÏàò
                balance_scores = list(balance_analysis.values())
                balance_analysis["overall_balance"] = sum(balance_scores) / len(balance_scores)
            
            return balance_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Ï¢åÏö∞ Í∑†Ìòï Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return {}
    
    def _analyze_posture_alignment(self, keypoints: List[List[float]]) -> Dict[str, Any]:
        """ÏûêÏÑ∏ Ï†ïÎ†¨ Î∂ÑÏÑù"""
        try:
            alignment_analysis = {}
            
            if len(keypoints) >= 17:
                # Ï≤ôÏ∂î Ï†ïÎ†¨ (Ïñ¥Íπ®-ÏóâÎç©Ïù¥-Î¨¥Î¶é)
                shoulder_center = [(keypoints[5][0] + keypoints[6][0]) / 2, (keypoints[5][1] + keypoints[6][1]) / 2]
                hip_center = [(keypoints[11][0] + keypoints[12][0]) / 2, (keypoints[11][1] + keypoints[12][1]) / 2]
                knee_center = [(keypoints[13][0] + keypoints[14][0]) / 2, (keypoints[13][1] + keypoints[14][1]) / 2]
                
                # Ï≤ôÏ∂î ÏßÅÏÑ†ÏÑ± Í≥ÑÏÇ∞
                spine_deviation = self._point_to_line_distance(hip_center, shoulder_center, knee_center)
                alignment_analysis["spine_alignment"] = 1.0 - min(spine_deviation, 0.1) / 0.1
                
                # Î®∏Î¶¨ Ï†ïÎ†¨ (ÏΩî-Ïñ¥Íπ® Ï§ëÏã¨)
                head_alignment = self._point_to_line_distance(keypoints[0], shoulder_center, hip_center)
                alignment_analysis["head_alignment"] = 1.0 - min(head_alignment, 0.1) / 0.1
                
                # Ï†ÑÏ≤¥ Ï†ïÎ†¨ Ï†êÏàò
                alignment_scores = list(alignment_analysis.values())
                alignment_analysis["overall_alignment"] = sum(alignment_scores) / len(alignment_scores)
            
            return alignment_analysis
            
        except Exception as e:
            logger.error(f"‚ùå ÏûêÏÑ∏ Ï†ïÎ†¨ Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return {}
    
    def _assess_virtual_fitting_suitability(self, keypoints: List[List[float]], joint_angles: Dict[str, float], body_proportions: Dict[str, float]) -> float:
        """Í∞ÄÏÉÅ ÌîºÌåÖ Ï†ÅÌï©ÏÑ± ÌèâÍ∞Ä"""
        try:
            suitability_score = 0.0
            total_factors = 0
            
            # 1. Ïã†Ï≤¥ ÎπÑÏú® Ï†ÅÌï©ÏÑ±
            if "arm_to_torso_ratio" in body_proportions:
                ratio = body_proportions["arm_to_torso_ratio"]
                if 0.7 <= ratio <= 1.1:  # ÏùòÎ•ò ÌîºÌåÖÏóê Ï†ÅÌï©Ìïú Î≤îÏúÑ
                    suitability_score += 1.0
                else:
                    suitability_score += max(0, 1.0 - abs(ratio - 0.9) / 0.4)
                total_factors += 1
            
            # 2. ÏûêÏÑ∏ ÏïàÏ†ïÏÑ±
            if "overall_balance" in self._analyze_left_right_balance(keypoints):
                balance = self._analyze_left_right_balance(keypoints)["overall_balance"]
                suitability_score += balance
                total_factors += 1
            
            # 3. Í¥ÄÏ†à Í∞ÅÎèÑ Ï†ÅÌï©ÏÑ±
            suitable_angles = 0
            total_angles = 0
            for joint, angle in joint_angles.items():
                if "elbow" in joint and 60 <= angle <= 150:
                    suitable_angles += 1
                elif "knee" in joint and 120 <= angle <= 180:
                    suitable_angles += 1
                elif "hip" in joint and 0 <= angle <= 120:
                    suitable_angles += 1
                total_angles += 1
            
            if total_angles > 0:
                angle_suitability = suitable_angles / total_angles
                suitability_score += angle_suitability
                total_factors += 1
            
            return suitability_score / total_factors if total_factors > 0 else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå Í∞ÄÏÉÅ ÌîºÌåÖ Ï†ÅÌï©ÏÑ± ÌèâÍ∞Ä Ïã§Ìå®: {e}")
            return 0.0
    
    def _identify_pose_issues(self, 
                            keypoints: List[List[float]], 
                            joint_angles: Dict[str, float], 
                            body_proportions: Dict[str, float],
                            scores: Dict[str, float]) -> List[str]:
        """Ìè¨Ï¶à Î¨∏Ï†úÏ†ê ÏãùÎ≥Ñ"""
        try:
            issues = []
            
            # Ìï¥Î∂ÄÌïôÏ†Å ÌÉÄÎãπÏÑ± Î¨∏Ï†ú
            if scores.get("anatomical_plausibility", 1.0) < 0.7:
                issues.append("Ìï¥Î∂ÄÌïôÏ†ÅÏúºÎ°ú Î∂ÄÏûêÏó∞Ïä§Îü¨Ïö¥ ÏûêÏÑ∏")
            
            # ÎåÄÏπ≠ÏÑ± Î¨∏Ï†ú
            if scores.get("body_symmetry", 1.0) < 0.8:
                issues.append("Ïã†Ï≤¥ Ï¢åÏö∞ Î∂àÍ∑†Ìòï")
            
            # Í¥ÄÏ†à Í∞ÅÎèÑ Î¨∏Ï†ú
            for joint, angle in joint_angles.items():
                if "elbow" in joint and not (60 <= angle <= 150):
                    issues.append(f"{joint} Í∞ÅÎèÑ ÎπÑÏ†ïÏÉÅ")
                elif "knee" in joint and not (120 <= angle <= 180):
                    issues.append(f"{joint} Í∞ÅÎèÑ ÎπÑÏ†ïÏÉÅ")
                elif "hip" in joint and not (0 <= angle <= 120):
                    issues.append(f"{joint} Í∞ÅÎèÑ ÎπÑÏ†ïÏÉÅ")
            
            # Ïã†Ï≤¥ ÎπÑÏú® Î¨∏Ï†ú
            if "arm_to_torso_ratio" in body_proportions:
                ratio = body_proportions["arm_to_torso_ratio"]
                if ratio < 0.6:
                    issues.append("ÌåîÏù¥ ÎÑàÎ¨¥ ÏßßÏùå")
                elif ratio > 1.2:
                    issues.append("ÌåîÏù¥ ÎÑàÎ¨¥ ÍπÄ")
            
            # Í∑†Ìòï Î¨∏Ï†ú
            if scores.get("left_right_balance", 1.0) < 0.8:
                issues.append("Ï¢åÏö∞ Í∑†Ìòï Î∂àÎüâ")
            
            # Ï†ïÎ†¨ Î¨∏Ï†ú
            if scores.get("posture_alignment", 1.0) < 0.8:
                issues.append("ÏûêÏÑ∏ Ï†ïÎ†¨ Î∂àÎüâ")
            
            return issues
            
        except Exception as e:
            logger.error(f"‚ùå Ìè¨Ï¶à Î¨∏Ï†úÏ†ê ÏãùÎ≥Ñ Ïã§Ìå®: {e}")
            return ["Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù"]
    
    def _generate_pose_recommendations(self, issues: List[str], scores: Dict[str, float]) -> List[str]:
        """Ìè¨Ï¶à Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±"""
        try:
            recommendations = []
            
            # ÏùºÎ∞òÏ†ÅÏù∏ Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠
            if scores.get("overall_quality", 1.0) < 0.7:
                recommendations.append("Ï†ÑÎ∞òÏ†ÅÏù∏ ÏûêÏÑ∏ Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§")
            
            # Íµ¨Ï≤¥Ï†ÅÏù∏ Î¨∏Ï†úÎ≥Ñ Í∂åÏû•ÏÇ¨Ìï≠
            for issue in issues:
                if "Ìï¥Î∂ÄÌïôÏ†Å" in issue:
                    recommendations.append("ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏûêÏÑ∏Î°ú Ï°∞Ï†ïÌïòÏÑ∏Ïöî")
                elif "Î∂àÍ∑†Ìòï" in issue:
                    recommendations.append("Ï¢åÏö∞ Í∑†ÌòïÏùÑ ÎßûÏ∂îÏÑ∏Ïöî")
                elif "Í∞ÅÎèÑ" in issue:
                    recommendations.append("Í¥ÄÏ†à Í∞ÅÎèÑÎ•º Ï†ïÏÉÅ Î≤îÏúÑÎ°ú Ï°∞Ï†ïÌïòÏÑ∏Ïöî")
                elif "ÌåîÏù¥ ÎÑàÎ¨¥ ÏßßÏùå" in issue:
                    recommendations.append("ÌåîÏùÑ Îçî Ìé¥ÏÑú Ï¥¨ÏòÅÌïòÏÑ∏Ïöî")
                elif "ÌåîÏù¥ ÎÑàÎ¨¥ ÍπÄ" in issue:
                    recommendations.append("ÌåîÏùÑ Î™∏Ïóê Îçî Í∞ÄÍπùÍ≤å ÏúÑÏπòÏãúÌÇ§ÏÑ∏Ïöî")
                elif "Í∑†Ìòï" in issue:
                    recommendations.append("Î™∏Ïùò Ï§ëÏã¨ÏùÑ ÎßûÏ∂îÏÑ∏Ïöî")
                elif "Ï†ïÎ†¨" in issue:
                    recommendations.append("Ï≤ôÏ∂îÎ•º Í≥ßÍ≤å Ìé¥Í≥† Î®∏Î¶¨Î•º Î∞îÎ•¥Í≤å ÏÑ∏Ïö∞ÏÑ∏Ïöî")
            
            # Í∞ÄÏÉÅ ÌîºÌåÖ ÏµúÏ†ÅÌôî Í∂åÏû•ÏÇ¨Ìï≠
            if scores.get("virtual_fitting_suitability", 1.0) < 0.8:
                recommendations.append("ÏùòÎ•ò ÌîºÌåÖÏùÑ ÏúÑÌï¥ Ï†ïÎ©¥ÏùÑ Ìñ•Ìïú ÏûêÏÑ∏Î°ú Ï¥¨ÏòÅÌïòÏÑ∏Ïöî")
            
            # Í∏∞Î≥∏ Í∂åÏû•ÏÇ¨Ìï≠
            if not recommendations:
                recommendations.append("ÌòÑÏû¨ ÏûêÏÑ∏Í∞Ä ÏñëÌò∏Ìï©ÎãàÎã§")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Ìè¨Ï¶à Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return ["Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§"]
    
    def _determine_quality_grade(self, overall_score: float) -> PoseQuality:
        """ÌíàÏßà Îì±Í∏â Í≤∞Ï†ï"""
        try:
            if overall_score >= 0.9:
                return PoseQuality.EXCELLENT
            elif overall_score >= 0.75:
                return PoseQuality.GOOD
            elif overall_score >= 0.6:
                return PoseQuality.ACCEPTABLE
            elif overall_score >= 0.4:
                return PoseQuality.POOR
            else:
                return PoseQuality.VERY_POOR
                
        except Exception as e:
            logger.error(f"‚ùå ÌíàÏßà Îì±Í∏â Í≤∞Ï†ï Ïã§Ìå®: {e}")
            return PoseQuality.POOR

# Î™®Îìà ÎÇ¥Î≥¥ÎÇ¥Í∏∞
__all__ = ["PoseAnalyzer", "PoseQuality"]
